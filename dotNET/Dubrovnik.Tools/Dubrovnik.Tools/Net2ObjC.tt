
<#@ template language="C#" debug="True" hostspecific="true"#>
<#@ output extension="log" #>
<#@ import namespace="System.Collections"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="Dubrovnik.Tools"#>
<#@ import namespace="Dubrovnik.Tools.Facets"#>
<#@ import namespace="Dubrovnik.Tools.Output"#>
<#
//     .Net to Objective-C code generator
//
//     This template will generate Objective-C bindings for each type
//     defined in the input assembly file.
//
//     The wrapper files will generate references to the mono Dubrovnik project to provide
//     access to embedded Mono runtime structures.
//
//      refs:
//      Generating multiple outputs
//      http://www.olegsych.com/2008/03/how-to-generate-multiple-outputs-from-single-t4-template/
//      Dealing with complexity
//      http://msdn.microsoft.com/en-us/magazine/hh975350.aspx
//

// This control block code will be integrated into the TransformText method of Net2ObjC.cs
_TransformText();

#>
<#+
//
//  WriteFileBanner() 
//
void WriteFileBanner() 
{
#>
//------------------------------------------------------------------------------
// <auto-generated tool="<#=GenToolName#>">
//
// <#=OutputFileType == OutputType.Implementation ? ImplementationFile : InterfaceFile #>
//
// Dubrovnik based macOS Cocoa Objective-C to Mono bindings.
//
// This code was generated using a tool available as part of:
// http://github.com/ThesaurusSoftware/Dubrovnik
// This code has dependencies on the above project.
//
// Date:     <#=TimeStamp#>
//
// Assembly: <#=AssemblyFacet.Name#>
// Fullname: <#=AssemblyFacet.FullName#>
// Path:     <#=AssemblyFacet.Path#>
//
// Platform: <#=Environment.OSVersion.VersionString#>
// OS Arch:  <#=Environment.Is64BitOperatingSystem ? "64 bit" : "32 bit"#>
// Process:  <#=Environment.Is64BitProcess ? "64 bit" : "32 bit"#>
// Target:   <#=GetTargetFrameworkVersion()#>
// Runtime:  <#=Environment.Version.ToString()#>
<#+
	// write references info	
	foreach (CodeFacet reference in AssemblyFacet.References)
	{
#>
//
// Asm Ref:  <#=reference.Name#>
// Fullname: <#=reference.FullName#>
<#+
	}
#>
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------
<#+
}

//
// WriteModuleBanner
//
public void WriteModuleBanner(CodeFacet facet, string module)
{
	string outputFile = facet.OutputFileName() + OutputFileSuffix();
#>
//++<#=GenToolName#> <#=outputFile#>
//
// Managed <#=module#> : <#=facet.Name#>
//
<#+
	if (OutputFileType == OutputType.Interface)
	{
		// ObjC interface
		string optionalImport = facet.ObjCFacet.Type + ".__Extra__.h";
		List<string> declarations =  ObjCForwardDeclarations(facet);
		string forwardDeclarations = String.Join("\n", declarations);
		string derivationImportDirectives = String.Join("\n", ObjCDerivationImportDirectives(facet));
		string importDirectives = String.Join("\n", ObjCImportDirectives(facet));
#>
//
// Frameworks
//
#import <Dubrovnik/Dubrovnik.h>

//
// Optional extra import. Not auto generated. Add manually to project only if required.
//
#if __has_include("<#=optionalImport#>")
#import "<#=optionalImport#>"
#endif

//
// Forward class and protocol declarations
//
<#=forwardDeclarations#>

//
// Local assembly imports
//
<#=importDirectives#>

//
// Import superclass and adopted protocols
//
<#=derivationImportDirectives#>

<#+
	}
	else 
	{
		string optionalImport = ObjCAssemblyName + ".private.h";
#>

// ARC is required
#if  ! __has_feature(objc_arc)
#error This file requires ARC. 
#endif

// Local assembly import
#import "<#=InterfaceFile#>"

#if __has_include("<#=optionalImport#>")
#import "<#=optionalImport#>"    // Not auto generated. Add manually to project.
#endif

<#+
	}
}

//
// WriteModuleFooter
//
public void WriteModuleFooter()
{
#>
//--<#=GenToolName#>
<#+	
}

//
// WriteInterfaceFilePreliminaries
//
public void WriteInterfaceFilePreliminaries()
{
	string objCAssemblyHeaderName = ObjCIdentifierFromManagedIdentifier(AssemblyFacet.Name);
	string objCAssemblyExtraHeader = objCAssemblyHeaderName + ".__Extra__.h";
	
#>
#import <Dubrovnik/Dubrovnik.h>

//
// Extra include
//
#if __has_include("<#=objCAssemblyExtraHeader#>")
#import "<#=objCAssemblyExtraHeader#>"	// Not auto generated. Add manually to project.
#endif

<#+
	if ( AssemblyFacet.References.Count() > 0) 
	{
#>

//
// Referenced assemblies
//
<#+
    }

	foreach (CodeFacet reference in AssemblyFacet.References)
	{
		string includeFile = reference.Name;
		string defineName = (ObjCIdentifierFromManagedIdentifier(includeFile) + "_Included").ToUpper();
#>
#ifndef <#=defineName#>
//#import "<#=includeFile#>.h"
#endif

<#+  
	}

#>

//
// Class aliases
//
<#+     
	foreach (CodeFacet facet in AssemblyFacet.AllFacets().OrderBy(f => f.Type))
	{
		WriteClassPredeclaration(facet);
	}	
}


//
// WritePragmaMark
//
public void WritePragmaMark(string info)
{
#>

#pragma mark -
#pragma mark <#=info#>
<#+	
}

//
// WriteCommentBlock
//
public void WriteCommentBlock(string info)
{
#>

/*

<#=info#>

*/
<#+	
}

//
// WriteImplementationFilePreliminaries
//
public void WriteImplementationFilePreliminaries()
{
	WriteModuleFeatureRequirements();
}

//
// WriteModuleFeatureRequirements
//
public void WriteModuleFeatureRequirements()
{
#>

// ARC is required
#if  ! __has_feature(objc_arc)
#error This file requires ARC. 
#endif

<#+
}

//
// WriteProtocolStart
//
public void WriteProtocolStart(InterfaceFacet facet, string module, bool writeImplementation = false)
{
	if (!writeImplementation) {
		WriteModuleBanner(facet, module);
   }
	
	ObjCProtocol protocol = new ObjCProtocol(this, facet, writeImplementation);

	if (!writeImplementation) {
#>

/*
 A managed interface is represented as follows:

 1. An adoption protocol that advertises that a class has adopted a given protocol. For the reasons 
 given in the notes below this protocol by default declares no members. The code generator will
 use this protocol when declaring classes and method parameters.

 2. An implementation protocol that declares the properties and methods defined by the interface.
 The code generator will use this protocol when declaring variables.

 3. An interface header and implementation body. The explicit class implementation of the managed interface
 can be used to create an instance that conforms to the given interface in order to access explicit properties.

 The above seems to give the best approach for interacting with complex managed interfaces.

 Notes:

 .Net support for explicit interfaces means that a class can inherit two or more different
 signatures for the same property or method from two or more interfaces. 
 This is not supported by Objective-C. 

 A second point is that properties declared in protocols don't get their ivars synthesized.
 This causes warnings to be issued when interface properties are exposed explicitly.

 A third point is that even when we receive a managed interface as a return value from a property 
 or method we still need to provide a full binding in order access those properties and methods.

 A class can test for protocol adoption using Class -conformsToProtocol: using the adoption protocol.
 By casting to the implementation protocol an instance can check for method implementation using respondsToSelector:.

 Properties and method predeclarations can be conditionally included in the adoption protocol if required.

*/

//
// Adoption protocol
//
@protocol <#=protocol.ProtocolName#> <<#=protocol.BaseProtocols#>>

@optional

#ifdef  DEF_P_AND_M_<#=protocol.ProtocolName.ToUpper()#>
<#+	
    } else {
#>

//
// Implementation protocol
//
@protocol <#=protocol.ProtocolName#> <<#=protocol.BaseProtocols#>>

@optional

<#+		
	}// if !writeAux
}
#>
